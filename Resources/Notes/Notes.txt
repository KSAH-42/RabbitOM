public class Dispatcher
{
    public bool IsRunning {get;}

    public void Run(){}
    public void Terminate(){}

    public void Dispatch( Action action ) {}
}

public abstract class RTSPSession : IDisposable
{
        public event EventHandler<RTSPCommunicationStartedEventArgs> CommunicationStarted;
        public event EventHandler<RTSPCommunicationStoppedEventArgs> CommunicationStopped;
        public event EventHandler<RTSPConnectedEventArgs> Connected;
        public event EventHandler<RTSPDisconnectedEventArgs> Disconnected;
        public event EventHandler<RTSPPacketReceivedEventArgs> PacketReceived;
        public event EventHandler<RTSPStreamingStartedEventArgs> StreamingStarted;
        public event EventHandler<RTSPStreamingStoppedEventArgs> StreamingStopped;
        public event EventHandler<RTSPConnectionErrorEventArgs> ConnectionError;
        public event EventHandler<RTSPAuthenticationErrorEventArgs> AuthenticationError;
        public event EventHandler<RTSPProtocolErrorEventArgs> ProtocolError;

        public abstract bool IsDisposed {get;}
        public abstract bool IsOpened {get;}
        public abstract bool IsClosed {get;}

        public static void StartEventLoop( Session session );
        public static void StopEventLoop( Session session );
        public static void DoEvents( Session session );
        public static void WaitForEvents( Session session );

        public abstract void Open();
        public abstract void Close();
        public abstract void Dispose();
        public abstract void Ping();
        public abstract bool StartStreaming();
        public abstract bool StopStreaming();
        public abstract bool WaitConnectionSucceed(Timeout timespan);

        public abstract TConfiguration GetConfiguration<TConfiguration>();
        public abstract void SetConfiguration<TConfiguration>( TConfiguration configuration );
        public abstract void Dispatch( Action action );
        public abstract void TriggerEvent( EventArgs action );
        

        protected virtual void OnCommunicationStarted( RTSPCommunicationStartedEventArgs e )
        {
            CommunicationStarted?.TryInvoke( this , e );
        }

        protected virtual void OnCommunicationStopped( RTSPCommunicationStoppedEventArgs e )
        {
            CommunicationStopped?.TryInvoke( this , e );
        }

        protected virtual void OnConnected( RTSPConnectedEventArgs e )
        {
            Connected?.TryInvoke( this ,e );
        }

        protected virtual void OnDisconnected( RTSPDisconnectedEventArgs e )
        {
            Disconnected?.TryInvoke( this , e );
        }

        protected virtual void OnPacketReceived( RTSPPacketReceivedEventArgs e )
        {
            PacketReceived?.TryInvoke( this , e );
        }

        protected virtual void OnStreamingStarted(RTSPStreamingStartedEventArgs e)
        {
            StreamingStarted?.TryInvoke(this, e);
        }

        protected virtual void OnStreamingStopped(RTSPStreamingStoppedEventArgs e)
        {
            StreamingStopped?.TryInvoke(this, e);
        }

        protected virtual void OnConnectionError(RTSPConnectionErrorEventArgs e)
        {
            ConnectionError?.TryInvoke(this, e);
        }

        protected virtual void OnAuthenticationError( RTSPAuthenticationErrorEventArgs e )
        {
            AuthenticationError?.TryInvoke( this , e );
        }

        protected virtual void OnProtocolError(RTSPProtocolErrorEventArgs e)
        {
            ProtocolError?.TryInvoke(this, e);
        }
}