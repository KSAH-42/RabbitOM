using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Concurrent;
using System.Threading;
using System.Linq;

namespace TestApp.Rtsp
{
	using TestApp.Rtsp.Clients;
	using TestApp.Rtsp.Clients.Filters;

	class Program
	{
		static void Main( string[] args )
		{
			Run( args );
		}

		static void Run( string[] args )
		{
			using ( var client = RtspClientFactory.NewClient() )
			{
				if ( client == null )
				{
					return;
				}

				client.CommunicationStarted += ( sender , e ) =>
				{
					Console.WriteLine( "Communication Started" );
				};

				client.CommunicationStopped += ( sender , e ) =>
				{
					Console.WriteLine( "Communication Stopped" );
				};

				client.Connected += ( sender , e ) =>
				{
					Console.WriteLine( "Connected" );
				};

				client.Disconnected += ( sender , e ) =>
				{
					Console.WriteLine( "Disconnected" );
				};

				client.Setup += ( sender , e ) =>
				{
					var builder = new RtspFiltersBuilder( sender as RtspClient )
					{
						PayloadType = e.PayloadType ,
						ClockRate = e.ClockRate ,
						PPS = e.PPS ,
						SPS = e.SPS ,
						VPS = e.VPS ,
						Codec = e.Codec ,
						ProfileId = e.ProfileId ,
					};

					e.IsCanceled = ! builder.TryBuild();

					Console.WriteLine( "Setup: {0}" , ! e.IsCanceled );
				};

				client.DataReceived += ( sender , e ) =>
				{
					Console.WriteLine( "DataReceived" );
				};

				client.Configuration.Uri = "rtsp://127.0.0.1/toy.mp4";
				client.Configuration.UserName = "admin";
				client.Configuration.Password = "camera123";
				client.Configuration.DeliveryMode = "Tcp";
				client.Configuration.MediaFormat = "Audio";
				client.Configuration.MulticastAddress = "224.0.0.1";
				client.Configuration.RtpPort = 12321;
				client.Configuration.TimeToLive = 123;
				client.Configuration.FilterEngine = FilterEngineType.Parallel;

				client.StartCommunication();

				Console.WriteLine( "Press any keys..." );
			}
		}
	}
}

namespace TestApp.Rtsp
{
	public sealed class RtspThread
	{
		public bool IsStarted { get; }
		public EventWaitHandle Handle { get; internal set; }

		public void Start( Action action ) { }
		public void Stop() { }

		internal bool CanContinue()
		{
			throw new NotImplementedException();
		}
	}
}

namespace TestApp.Rtsp.Clients
{
	using TestApp.Rtsp.Clients.Filters;

	public enum FilterEngineType
	{
		Parallel , Sequencial
	}

	public class ConnectedEventArgs : EventArgs { }
	public class DisconnectedEventArgs : EventArgs { }
	public class ConnectionFailedEventArgs : EventArgs { }
	public class CommunicationStartedEventArgs : EventArgs { }
	public class CommunicationStoppedEventArgs : EventArgs { }
	public class DataReceivedEventArgs : EventArgs { }
	public class SetupEventArgs : EventArgs 
	{
		public uint PayloadType { get; }
		public uint ClockRate { get; }
		public string PPS { get; }
		public string VPS { get; }
		public string SPS { get; }
		public string Codec { get; }
		public string ProfileId { get; }
		public bool IsCanceled { get; set; } // Use to cancel the setup in case that decoder can not be created, at this moment, we don't consumme bandwith if we can decode
	}

	public class StreamingActiveEventArgs : EventArgs { }
	public class StreamingInActiveEventArgs : EventArgs { }
	public class CustomEventArgs : EventArgs { }

	public abstract class RtspConfiguration
	{
		public abstract object SyncRoot { get; }
		public abstract string Uri { get; set; }
		public abstract string UserName { get; set; }
		public abstract string Password { get; set; }
		public abstract string ReceiveTimeout { get; set; }
		public abstract TimeSpan SendTimeout { get; set; }
		public abstract TimeSpan ReceiveTransportTimeout { get; set; }
		public abstract TimeSpan RetriesInterval { get; set; }
		public abstract TimeSpan RetriesTransportInterval { get; set; }
		public abstract string TranportTimeout { get; set; }
		public abstract string KeepAliveInterval { get; set; }
		public abstract string KeepAliveType { get; set; }
		public abstract int RtpPort { get; set; }
		public abstract string MulticastAddress { get; set; }
		public abstract byte TimeToLive { get; set; }
		public abstract string DeliveryMode { get; set; }
		public abstract string MediaFormat { get; set; }
		public abstract FilterEngineType FilterEngine { get; set; }
		public abstract IReadOnlyDictionary<string , string> DefaultHeaders { get; }


		public abstract void Validate();
		public abstract bool TryValidate();
		public abstract void AddHeader( string name , string value );
		public abstract bool TryAddHeader( string name , string value );
		public abstract bool RemoveHeader( string name , string value );
		public abstract bool RemoveAllHeaders();
	}

	public abstract class RtspClient : IDisposable
	{
		public event EventHandler<ConnectedEventArgs> Connected;
		public event EventHandler<DisconnectedEventArgs> Disconnected;
		public event EventHandler<ConnectionFailedEventArgs> ConnectionFailed;
		public event EventHandler<CommunicationStartedEventArgs> CommunicationStarted;
		public event EventHandler<CommunicationStoppedEventArgs> CommunicationStopped;
		public event EventHandler<SetupEventArgs> Setup;
		public event EventHandler<DataReceivedEventArgs> DataReceived;
		public event EventHandler<StreamingActiveEventArgs> StreamingActive;
		public event EventHandler<StreamingInActiveEventArgs> StreamingInActive;
		public event EventHandler<CustomEventArgs> Event;


		public abstract object SyncRoot { get; }
		public abstract RtspConfiguration Configuration { get; }
		public abstract RtspFilterReadOnlyCollection Filters { get; }
		public abstract bool IsCommunicationStarted { get; }
		public abstract bool IsConnected { get; }
		public abstract bool IsSetup { get; }
		public abstract bool IsReceivingData { get; }
		public abstract bool IsStreamingActive { get; }
		public abstract bool IsDisposed { get; }



		public abstract void AddFilter( RtspFilter filter );
		public abstract void AddFilterBefore( RtspFilter filter , RtspFilter previousFilter );
		public abstract void AddFilterAfter( RtspFilter filter , RtspFilter previousFilter );
		public abstract bool TryAddFilter( RtspFilter filter );
		public abstract bool RemoveFilter( RtspFilter filter );
		public abstract bool RemoveFilterById( string filter );
		public abstract bool RemoveFilterById( string filter , string previous );
		public abstract bool RemoveAllFilters( RtspFilter filter );
		public abstract void StartCommunication();
		public abstract void StopCommunication();
		public abstract void StopCommunication( TimeSpan timeout );
		public abstract bool WaitForConnection( TimeSpan timeout );
		public abstract bool WaitForConnection( TimeSpan timeout , EventWaitHandle cancelationHandle );
		public abstract void Dispose();
		public abstract void Dispatch( Action action );



		public static void DispatchEvent( RtspClient client , EventArgs e )
		{
			client?.Dispatch( new Action( () =>
			{
				RaiseEvent( client , e );
			} ) );
		}

		public static void RaiseEvent( RtspClient client , EventArgs e )
		{
			if ( client == null )
				throw new ArgumentNullException( nameof( client ) );

			if ( e == null )
				throw new ArgumentNullException( nameof( e ) );

			if ( e is DataReceivedEventArgs )
			{
				client.OnDataReceived( e as DataReceivedEventArgs );
			}
			else if ( e is CommunicationStartedEventArgs )
			{
				client.OnCommunicationStarted( e as CommunicationStartedEventArgs );
			}
			else if ( e is CommunicationStoppedEventArgs )
			{
				client.OnCommunicationStopped( e as CommunicationStoppedEventArgs );
			}
			else if ( e is ConnectedEventArgs )
			{
				client.OnConnected( e as ConnectedEventArgs );
			}
			else if ( e is DisconnectedEventArgs )
			{
				client.OnDisconnected( e as DisconnectedEventArgs );
			}
			else if ( e is ConnectionFailedEventArgs )
			{
				client.OnConnectionFailed( e as ConnectionFailedEventArgs );
			}
			else if ( e is SetupEventArgs )
			{
				client.OnSetup( e as SetupEventArgs );
			}
			else if ( e is StreamingActiveEventArgs )
			{
				client.OnStreamingActive( e as StreamingActiveEventArgs );
			}
			else if ( e is StreamingInActiveEventArgs )
			{
				client.OnStreamingInActive( e as StreamingInActiveEventArgs );
			}
			else if ( e is CustomEventArgs )
			{
				client.OnCustomEvent( e as CustomEventArgs );
			}
		}






		protected virtual void OnConnected( ConnectedEventArgs e )
		{
			Connected?.Invoke( this , e );
		}
		protected virtual void OnDisconnected( DisconnectedEventArgs e )
		{
			Disconnected?.Invoke( this , e );
		}
		protected virtual void OnConnectionFailed( ConnectionFailedEventArgs e )
		{
			ConnectionFailed?.Invoke( this , e );
		}
		protected virtual void OnCommunicationStarted( CommunicationStartedEventArgs e )
		{
			CommunicationStarted?.Invoke( this , e );
		}
		protected virtual void OnCommunicationStopped( CommunicationStoppedEventArgs e )
		{
			CommunicationStopped?.Invoke( this , e );
		}
		protected virtual void OnSetup( SetupEventArgs e )
		{
			Setup?.Invoke( this , e );
		}
		protected virtual void OnDataReceived( DataReceivedEventArgs e )
		{
			DataReceived?.Invoke( this , e );
		}
		protected virtual void OnStreamingActive( StreamingActiveEventArgs e )
		{
			StreamingActive?.Invoke( this , e );
		}
		protected virtual void OnStreamingInActive( StreamingInActiveEventArgs e )
		{
			StreamingInActive?.Invoke( this , e );
		}
		protected virtual void OnCustomEvent( CustomEventArgs e )
		{
			Event?.Invoke( this , e );
		}
	}

	public static class RtspClientFactory
	{
		public static RtspClient NewClient()
		{
			return null;
		}
	}

	public sealed class RtspClientBuilder
	{
		private readonly RtspClient _client;

		public RtspClientBuilder( RtspClient client )
		{
			_client = client ?? throw new ArgumentNullException( nameof( client ) );
		}

		public string Uri { get; set; }
		public string UserName { get; set; }
		public string Password { get; set; }
		public TimeSpan ReceiveTimeout { get; set; }
		public TimeSpan SendTimeout { get; set; }
		
		public RtspClientBuilder ConfigureAsDefault()
			=> throw new NotImplementedException();
		public RtspClientBuilder ConfigureForMulticast( string address , int port )
			=> throw new NotImplementedException();
		public RtspClientBuilder ConfigureForUnicastUdp( int port )
			=> throw new NotImplementedException();
		public RtspClientBuilder ConfigureForInterleaved()
			=> throw new NotImplementedException();

		public void Build()
			=> throw new NotImplementedException();
		public bool TryBuild()
			=> throw new NotImplementedException();
	}

	public sealed class RtspFiltersBuilder
	{
		private static readonly ConcurrentDictionary<string,Func<RtspFilter>> s_registry = new ConcurrentDictionary<string, Func<RtspFilter>>();

		private readonly RtspClient _client;

		static RtspFiltersBuilder()
		{
			RtspFiltersBuilder.RegisterFilter( "fowarder.udp" , () => new UdpFowarderFilter() );
			RtspFiltersBuilder.RegisterFilter( "rtp.agreggator" , () => new RtpAgreggatorFilter() );
			RtspFiltersBuilder.RegisterFilter( "rtp.sink" , () => new RtpSinkFilter() );
			RtspFiltersBuilder.RegisterFilter( "rtp.decoder.jpeg" , () => new JpegRtpDecoderFilter() );
			RtspFiltersBuilder.RegisterFilter( "rtp.decoder.h264" , () => new H264RtpDecoderFilter() );
			RtspFiltersBuilder.RegisterFilter( "rtp.decoder.h265" , () => new H265RtpDecoderFilter() );
			RtspFiltersBuilder.RegisterFilter( "codec.jpeg" , () => new JpegCodecFilter() );
			RtspFiltersBuilder.RegisterFilter( "codec.h264" , () => new H264CodecFilter() );
			RtspFiltersBuilder.RegisterFilter( "codec.h265" , () => new H265CodecFilter() );
			RtspFiltersBuilder.RegisterFilter( "video.render" , () => new VideoRenderFilter() );
		}

		public RtspFiltersBuilder( RtspClient client )
		{
			_client = client ?? throw new ArgumentNullException( nameof( client ) );
		}

		public uint PayloadType { get; set; }
		public uint ClockRate { get; set; }
		public string TrackUri { get; set; }
		public string PPS { get; set; }
		public string SPS { get; set; }
		public string VPS { get; set; }
		public string Codec { get; set; }
		public string ProfileId { get; set; }

		public RtspFiltersBuilder AddFilter( RtspFilter filter )
			=> throw new NotImplementedException();
		
		public void Build()
			=> throw new NotImplementedException();
		
		public bool TryAddFilter( RtspFilter filter )
			=> throw new NotImplementedException();
		public bool TryBuild()
			=> throw new NotImplementedException();		   

		public static void RegisterFilter( string key , Func<RtspFilter> factory )
			=> s_registry.TryAdd( key , factory );
		public static void UnRegisterFilter( string key )
			=> s_registry.TryRemove( key , out Func<RtspFilter> factory );
	}
}

namespace TestApp.Rtsp.Clients.Filters
{
	public sealed class RtspDataFilter
	{
		public static readonly RtspDataFilter Empty = new RtspDataFilter();

		private RtspDataFilter()
		{
		}

		public RtspDataFilter( object source , object value )
		{
			Source = source ?? throw new ArgumentNullException( nameof( source ) );
			Value = value;
		}

		public object Source { get; }
		public object Value { get; }

		public static bool IsNullOrEmpty( RtspDataFilter data )
		{
			return object.ReferenceEquals( data , null )
				|| object.ReferenceEquals( data , Empty )
				;
		}
	}

	public sealed class RtspFilterDataQueue : Queue<RtspDataFilter>
	{
		public bool IsEnabled { get; set; }

		public static bool Wait( RtspFilterDataQueue queue , EventWaitHandle cancelationHandle )
		{
			return false;
		}

		public static bool Wait( RtspFilterDataQueue queue , TimeSpan timeout , EventWaitHandle cancelationHandle )
		{
			return false;
		}
	}

	public class RtspStoppedFilterEventArgs : EventArgs { }
	public class RtspStartedFilterEventArgs : EventArgs { }
	public class RtspIdleEventArgs : EventArgs { }

	public abstract class RtspFilter : IDisposable
	{
		public event EventHandler<RtspStartedFilterEventArgs> Started;
		public event EventHandler<RtspStoppedFilterEventArgs> Stopped;
		public event EventHandler<RtspIdleEventArgs> Idle;

		private readonly object _lock;
		private TimeSpan _timeout;
		private bool _isEnabled;
		private RtspClient _client;

		protected RtspFilter()
		{
			_lock = new object();
			_isEnabled = true;
		}
		~RtspFilter()
		{
			Dispose( false );
		}

		public object SyncRoot
		{
			get => _lock;
		}

		public bool IsEnabled
		{
			get
			{
				lock ( _lock )
				{
					return _isEnabled;
				}
			}
			set
			{
				lock ( _lock ) 
				{
					_isEnabled = value;
				}
			}
		}
		public TimeSpan Timeout
		{
			get
			{
				lock ( _lock )
				{
					return _timeout;
				}
			}

			set
			{
				lock ( _lock )
				{
					_timeout = value;
				}
			}
		}

		protected RtspClient Client
		{
			get
			{
				lock ( _lock )
				{
					return _client;
				}
			}
		}

		public void Dispose()
		{
			Dispose( true );
			GC.SuppressFinalize( this );
		}

		protected void Dispose( bool disposing )
		{
		}



		internal static void SetClient( RtspFilter filter , RtspClient client )
		{
			if ( filter == null )
				throw new ArgumentNullException( nameof( filter ) );

			if ( client == null )
				throw new ArgumentNullException( nameof( filter ) );

			filter._client = client;
		}

		public static void RaiseEvent( RtspFilter source , EventArgs e )
		{
			if ( e is RtspStartedFilterEventArgs )
			{
				source.OnStarted( e as RtspStartedFilterEventArgs );
			}

			else

			if ( e is RtspStoppedFilterEventArgs )
			{
				source.OnStopped( e as RtspStoppedFilterEventArgs );
			}

			else

			if ( e is RtspIdleEventArgs )
			{
				source.OnIdle( e as RtspIdleEventArgs );
			}
		}




		public abstract RtspDataFilter Execute( RtspDataFilter data );



		protected virtual void OnStarted( RtspStartedFilterEventArgs e )
		{
			Started?.Invoke( this , e );
		}

		protected virtual void OnStopped( RtspStoppedFilterEventArgs e )
		{
			Stopped?.Invoke( this , e );
		}

		protected virtual void OnIdle( RtspIdleEventArgs e )
		{
			Idle?.Invoke( this , e );
		}
	}

	public sealed class RtspFilterList : List<RtspFilter>
	{
		public RtspFilterList()
		{
		}
	}

	public sealed class RtspFilterReadOnlyCollection : System.Collections.ObjectModel.ReadOnlyCollection<RtspFilter>
	{
		public RtspFilterReadOnlyCollection( RtspFilterList filters )
			: base( filters as IList<RtspFilter> )
		{
		}

		public bool Contains( string id ) => throw new NotImplementedException();
		public RtspFilter First() => throw new NotImplementedException();
		public RtspFilter Last() => throw new NotImplementedException();
		public RtspFilter FindById( string id ) => throw new NotImplementedException();
		public RtspFilter GetById( string id ) => throw new NotImplementedException();
		public bool TryGetById( string id , out RtspFilter result ) => throw new NotImplementedException();
	}

	public sealed class JpegRtpDecoderFilter : RtspFilter
	{
		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return null;
		}
	}

	public sealed class H264RtpDecoderFilter : RtspFilter
	{
		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return null;
		}
	}

	public sealed class H265RtpDecoderFilter : RtspFilter
	{
		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return null;
		}
	}

	public sealed class VideoRenderFilter : RtspFilter
	{
		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return null;
		}

		protected override void OnStarted( RtspStartedFilterEventArgs e )
		{
			base.OnStarted( e );
		}

		protected override void OnStopped( RtspStoppedFilterEventArgs e )
		{
			base.OnStopped( e );
		}
	}

	
	public sealed class RtpAgreggatorFilter : RtspFilter
	{
		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return null;
		}

		protected override void OnStarted( RtspStartedFilterEventArgs e )
		{
			base.OnStarted( e );
		}

		protected override void OnStopped( RtspStoppedFilterEventArgs e )
		{
			base.OnStopped( e );
		}
	}

	public class UdpFowarderFilter : RtspFilter
	{
		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return data;
		}
	}

	public class RtpSinkFilter : RtspFilter
	{
		private readonly object _lock = new object();
		private readonly HashSet<int> _supportedPayloads = new HashSet<int>();

		public IReadOnlyCollection<int> SupportedPayloads
		{
			get
			{
				lock ( _lock )
				{
					return new List<int>( _supportedPayloads );
				}
			}
		}

		public void RegisterPayload( int value )
		{
			lock ( _lock )
			{
				_supportedPayloads.Add( value );
			}
		}

		public void UnRegisterPayload( int value )
		{
			lock ( _lock )
			{
				_supportedPayloads.Remove( value );
			}
		}

		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return new RtspDataFilter( this , OnHandleData( data.Value as byte[] ) );
		}

		protected override void OnStarted( RtspStartedFilterEventArgs e )
		{
			base.OnStarted( e );
		}

		protected override void OnStopped( RtspStoppedFilterEventArgs e )
		{
			base.OnStopped( e );
		}

		protected virtual byte[] OnHandleData( byte[] data )
		{
			return null;
		}
	}

	public sealed class RtpSourceFilter : RtspFilter
	{
		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return data;
		}
	}

	public sealed class DataLoggerFilter : RtspFilter
	{
		public bool TriggerEvents { get; set; }

		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			if ( TriggerEvents )
				OnDataReceived( new DataReceivedEventArgs() );

			return new RtspDataFilter( this , data.Value );
		}

		protected override void OnStarted( RtspStartedFilterEventArgs e )
		{
			base.OnStarted( e );
		}

		protected override void OnStopped( RtspStoppedFilterEventArgs e )
		{
			base.OnStopped( e );
		}

		private void OnDataReceived( DataReceivedEventArgs e )
		{
			RtspClient.DispatchEvent( Client , e );
		}
	}

	public sealed class TcpSenderFilter : RtspFilter
	{
		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return data ?? RtspDataFilter.Empty;
		}

		protected override void OnStarted( RtspStartedFilterEventArgs e )
		{
			base.OnStarted( e );
		}

		protected override void OnStopped( RtspStoppedFilterEventArgs e )
		{
			base.OnStopped( e );
		}
	}

	public sealed class JpegCodecFilter : RtspFilter
	{
		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return null;
		}
	}

	public sealed class H264CodecFilter : RtspFilter
	{
		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return null;
		}
	}

	public sealed class H265CodecFilter : RtspFilter
	{
		public override RtspDataFilter Execute( RtspDataFilter data )
		{
			return null;
		}
	}
}

namespace TestApp.Rtsp.Clients.Filters.Graphs
{
	public interface IFilterGraph
	{
		event EventHandler Started;
		event EventHandler Stopped;

		IReadOnlyCollection<RtspFilter> Filters { get; }
		bool IsStarted { get; }

		void AddFilter( RtspFilter filter );
		void AddFilterAfter( RtspFilter filter , RtpSourceFilter previousFilter );
		void AddFilterBefore( RtspFilter filter , RtspFilter nextFilter );
		void RemoveFilter( RtspFilter filter );
		void RemoveFilterById( string uniqueId );
		void RemoveAllFilters();
		void RemoveAndDestroyFilters();
		void Start();
		void Stop();
		void WriteData( RtspDataFilter data );
	}

	public abstract class RtspFilterGraph : IFilterGraph , IDisposable
	{
		public event EventHandler Started;
		public event EventHandler Stopped;

		~RtspFilterGraph()
		{
			Dispose( false );
		}

		public abstract IReadOnlyCollection<RtspFilter> Filters { get; }
		public abstract bool IsStarted { get; }

		public abstract void AddFilter( RtspFilter filter );
		public abstract void AddFilterAfter( RtspFilter filter , RtpSourceFilter previousFilter );
		public abstract void AddFilterBefore( RtspFilter filter , RtspFilter nextFilter );
		public abstract void RemoveFilter( RtspFilter filter );
		public abstract void RemoveFilterById( string uniqueId );
		public abstract void RemoveAllFilters();
		public abstract void RemoveAndDestroyFilters();
		public abstract void Start();
		public abstract void Stop();
		public abstract void WriteData( RtspDataFilter data );

		public void Dispose()
		{
			Dispose( true );
			GC.SuppressFinalize( this );
		}
		protected abstract void Dispose( bool disposing );


		protected virtual void OnStarted( EventArgs e )
		{
			Started?.Invoke( this , e );
		}

		protected virtual void OnStopped( EventArgs e )
		{
			Stopped?.Invoke( this , e );
		}
	}

	public sealed class MediaRtspFilterGraph : RtspFilterGraph
	{
		private readonly object _lock;
		private readonly RtspClient _client;
		private readonly RtspThread _thread;
		private readonly RtspFilterList _filters;
		private readonly RtspFilterEngineList _engines;
		private readonly RtspFilterDataQueue _queue;

		public MediaRtspFilterGraph( RtspClient client )
		{
			_client = client ?? throw new ArgumentNullException( nameof( client ) );
			_lock = new object();
			_thread = new RtspThread();
			_filters = new RtspFilterList();
			_engines = new RtspFilterEngineList();
			_queue = new RtspFilterDataQueue();
		}

		public override IReadOnlyCollection<RtspFilter> Filters
		{
			get => _filters;
		}

		public override bool IsStarted
		{
			get => _thread.IsStarted;
		}

		public override void AddFilter( RtspFilter filter )
		{
			EnsureNotStarted();

			throw new NotImplementedException();
		}

		public override void AddFilterAfter( RtspFilter filter , RtpSourceFilter previousFilter )
		{
			EnsureNotStarted();

			throw new NotImplementedException();
		}

		public override void AddFilterBefore( RtspFilter filter , RtspFilter nextFilter )
		{
			EnsureNotStarted();

			throw new NotImplementedException();
		}

		public override void RemoveFilter( RtspFilter filter )
		{
			EnsureNotStarted();

			throw new NotImplementedException();
		}

		public override void RemoveFilterById( string uniqueId )
		{
			EnsureNotStarted();

			throw new NotImplementedException();
		}

		public override void RemoveAllFilters()
		{
			EnsureNotStarted();

			throw new NotImplementedException();
		}

		public override void RemoveAndDestroyFilters()
		{
			EnsureNotStarted();

			throw new NotImplementedException();
		}

		public override void Start()
		{
			_thread.Start( Processing );
		}
		public override void Stop()
		{
			_thread.Stop();
		}
		public override void WriteData( RtspDataFilter data )
		{
			_queue.Enqueue( data );
		}

		protected override void Dispose( bool disposing )
		{
			if ( disposing )
			{
				Stop();

				foreach ( var filter in _filters )
				{
					filter.Dispose();
				}

				foreach ( var engine in _engines )
				{
					engine.Dispose();
				}

				_filters.Clear();
				_engines.Clear();

			}
		}

		private void EnsureNotStarted()
		{
			if ( _thread.IsStarted )
				throw new InvalidOperationException();
		}

		private RtspFilterEngine CreateEngine( RtspFilter filter )
		{
			return RtspFilterEngineFactory.NewFilterEngine( filter , _client.Configuration.FilterEngine );
		}



		private void Processing()
		{
			OnStarted( EventArgs.Empty );

			var engine = _engines.FirstOrDefault();

			while ( _thread.CanContinue() )
			{
				if ( RtspFilterDataQueue.Wait( _queue , _thread.Handle ) )
				{
					while ( _queue.Count > 0 )
					{
						engine?.WriteData( _queue.Dequeue() );
					}
				}
			}

			OnStopped( EventArgs.Empty );
		}

		protected override void OnStarted( EventArgs e )
		{
			foreach ( var filter in _filters )
			{
				RtspFilter.RaiseEvent( filter , new RtspStartedFilterEventArgs() );
			}

			foreach ( ParrallelFilterEngine engine in _engines )
			{
				engine.Start();
			}

			base.OnStarted( e );
		}

		protected override void OnStopped( EventArgs e )
		{
			foreach ( ParrallelFilterEngine engine in _engines )
			{
				engine.Stop();
			}

			foreach ( var filter in _filters )
			{
				RtspFilter.RaiseEvent( filter , new RtspStoppedFilterEventArgs() );
			}

			base.OnStopped( e );
		}
	}


	//-----------------------------------------------

	public static class RtspFilterEngineFactory
	{
		public static RtspFilterEngine NewFilterEngine( RtspFilter filter , FilterEngineType type )
		{
			switch ( type )
			{
				case FilterEngineType.Parallel:
					return new ParrallelFilterEngine( filter );
				case FilterEngineType.Sequencial:
					return new SequentialFilterEngine( filter );
			}

			throw new NotImplementedException();
		}
	}

	public abstract class RtspFilterEngine : IDisposable
	{
		private readonly RtspFilterEngineList _edges = new RtspFilterEngineList();

		~RtspFilterEngine()
		{
			Dispose( false );
		}

		public IReadOnlyCollection<RtspFilterEngine> Edges
		{
			get => _edges;
		}

		public void AddEdge( RtspFilterEngine edge )
			=> _edges.Add( edge );
		public void RemoveEdge( RtspFilterEngine edge )
			=> _edges.Add( edge );

		public abstract void WriteData( RtspDataFilter data );

		public void Dispose()
		{
			Dispose( true );
			GC.SuppressFinalize( this );
		}

		protected virtual void Dispose( bool disposing )
		{
		}
	}

	public sealed class SequentialFilterEngine : RtspFilterEngine
	{
		private readonly RtspFilter _filter;
		
		public SequentialFilterEngine( RtspFilter filter )
		{
			_filter = filter ?? throw new ArgumentNullException( nameof( filter ) );
		}

		

		public override void WriteData( RtspDataFilter data )
		{
			if ( data == null )
				return;

			if ( !_filter.IsEnabled )
				return;

			data = _filter.Execute( data );

			if ( data != null )
			{
				foreach ( var edge in Edges )
				{
					edge.WriteData( data );
				}
			}
		}
	}

	public sealed class ParrallelFilterEngine : RtspFilterEngine
	{
		private readonly RtspThread _thread;
		private readonly RtspFilter _filter;
		private readonly ConcurrentQueue<RtspDataFilter> _queue;

		public ParrallelFilterEngine( RtspFilter filter )
		{
			_filter = filter ?? throw new ArgumentNullException( nameof( filter ) );
			_thread = new RtspThread();
			_queue = new ConcurrentQueue<RtspDataFilter>();
		}

		public bool IsStarted
			=> _thread.IsStarted;
		public void Start()
			=> _thread.Start( ProcessData );
		public void Stop()
			=> _thread.Stop();
		public override void WriteData( RtspDataFilter data )
		{
			if ( data == null || !_filter.IsEnabled )
				return;
			_queue.Enqueue( data );
		}
		protected override void Dispose( bool disposing )
		{
			if ( disposing )
			{
				Stop();
			}
		}


		private void ProcessData()
		{
			while ( _thread.CanContinue() )
			{
				while ( _queue.Count > 0 )
				{
					if ( !_queue.TryDequeue( out RtspDataFilter data ) )
					{
						continue;
					}

					if ( data == null )
					{
						continue;
					}

					data = _filter.Execute( data );

					if ( data == null )
					{
						continue;
					}

					foreach ( var edge in Edges )
					{
						edge.WriteData( data );
					}
				}
			}
		}
	}

	public sealed class RtspFilterEngineList : HashSet<RtspFilterEngine>
	{
	}
}
